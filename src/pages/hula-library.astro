---
import BaseLayout from "../layouts/BaseLayout.astro";
import auana from "../data/auana.json";

// Protect this page from unauthenticated access
const isLoggedIn = Astro.cookies.has("sb-access-token");
if (!isLoggedIn) {
  return Astro.redirect("/");
}

import fallbackImage from "../assets/images/coa1.jpg";
const heroImage = { src: fallbackImage.src };

// Sort videos alphabetically by title
const hulaVideos = auana.sort((a, b) => a.title.localeCompare(b.title));

// Group videos by first letter
const videosByLetter = hulaVideos.reduce((acc, video) => {
  const firstLetter = video.title.charAt(0).toUpperCase();
  if (!acc[firstLetter]) {
    acc[firstLetter] = [];
  }
  acc[firstLetter].push(video);
  return acc;
}, {});

const letters = Object.keys(videosByLetter).sort();

// Safely serialize the data for JavaScript
const videoDataJson = JSON.stringify(hulaVideos).replace(/</g, '\\u003c').replace(/>/g, '\\u003e');
---

<BaseLayout
  title="Hula Library | Hālau Hula Malani O Kapehe"
  description="Browse our collection of hula videos, lyrics, and translations for haumāna of Hālau Hula Malani O Kapehe."
  preloadedImage={heroImage}
>
  <!-- Your existing HTML content here -->
  <section id="library-hero">
    <div class="hero-overlay"></div>
    <div class="hero-content">
      <h1 class="cinzel">Hula Library</h1>
      <div class="divider"></div>
      <p class="hero-description">
        Access our collection of hula videos, lyrics, and translations for practice and study.
      </p>
    </div>
  </section>

  <section id="library-content">
    <div class="cs-container">
      <!-- Left Column: Video Index -->
      <div class="library-index">
        <!-- Search -->
        <div class="search-container">
          <input 
            type="text" 
            id="video-search" 
            placeholder="Search by title..." 
            class="search-input"
          />
        </div>

        <!-- Filter Buttons -->
        <div class="filter-container">
          <button class="filter-btn active" data-filter="all">All</button>
          <button class="filter-btn" data-filter="Kahiko">Kahiko</button>
          <button class="filter-btn" data-filter="Auana">Auana</button>
        </div>

        <!-- Alphabet Index -->
        <div class="alphabet-index">
          {letters.map(letter => (
            <a href={`#letter-${letter}`} class="letter-link">{letter}</a>
          ))}
        </div>

        <!-- Videos List -->
        <div class="videos-container">
          {letters.map(letter => (
            <div id={`letter-${letter}`} class="letter-section">
              <h2 class="letter-heading">{letter}</h2>
              <div class="video-list">
                {videosByLetter[letter].map(video => (
                  <div 
                    class="video-item" 
                    data-category={video.category} 
                    data-video-id={video.id}
                    data-title={video.title.toLowerCase()}
                  >
                    <h3 class="video-title">{video.title}</h3>
                    <span class="video-category">{video.category}</span>
                    {video.description && <p class="video-description">{video.description}</p>}
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Right Column: Video Display -->
      <div id="video-display" class="video-display">
        <div id="video-placeholder" class="video-placeholder">
          <div class="placeholder-icon">▶</div>
          <p>Select a video from the library to view</p>
        </div>
        
        <div id="video-content" class="video-content" style="display: none;">
          <h2 id="video-title" class="video-display-title"></h2>
          <div id="video-category" class="video-display-category"></div>
          <div id="video-authors" class="video-authors" style="display: none;"></div> 
          
          <!-- Video player -->
          <div class="video-player-container">
            <iframe 
              id="video-iframe"
              width="640"
              height="360"
              frameborder="0"
              allow="autoplay; fullscreen; picture-in-picture"
              allowfullscreen
              class="video-iframe"
              referrerpolicy="strict-origin-when-cross-origin"
            ></iframe>
          </div>
          
          <div class="video-details">
            <div id="video-notes" class="video-notes" style="display: none;">
              <h3>Notes</h3>
              <p id="notes-content"></p>
            </div>
            
            <div id="video-lyrics" class="video-lyrics" style="display: none;">
              <h3>Lyrics</h3>
              <div id="lyrics-content" class="lyrics-content"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <script define:vars={{ videoDataJson }}>
    // Parse the video data safely
    const videoData = JSON.parse(videoDataJson);
    
    // DEBUG: Log the video data to see if it's loading correctly
    console.log('Video data loaded:', videoData);
    
    // DOM elements
    const videoItems = document.querySelectorAll('.video-item');
    const videoPlaceholder = document.getElementById('video-placeholder');
    const videoContent = document.getElementById('video-content');
    const searchInput = document.getElementById('video-search');
    const filterButtons = document.querySelectorAll('.filter-btn');
    
    // DEBUG: Log DOM elements to see if they're found
    console.log('Video items found:', videoItems.length);
    console.log('Video placeholder:', videoPlaceholder);
    console.log('Video content:', videoContent);
    
    // Video display elements
    const videoTitle = document.getElementById('video-title');
    const videoCategory = document.getElementById('video-category');
    const videoAuthors = document.getElementById('video-authors');
    const videoIframe = document.getElementById('video-iframe');
    const videoNotes = document.getElementById('video-notes');
    const notesContent = document.getElementById('notes-content');
    const videoLyrics = document.getElementById('video-lyrics');
    const lyricsContent = document.getElementById('lyrics-content');

 // Helper function to render lyrics
function renderLyrics(lyrics) {
  if (!lyrics || typeof lyrics !== 'object') {
    return '';
  }
  
  let html = '';
  Object.entries(lyrics).forEach(([section, lines]) => {
    html += `<div class="lyrics-section">`;
    html += `<h4>${section}</h4>`;
    if (Array.isArray(lines)) {
      lines.forEach(line => {
        if (line === 'LINEBREAK') {
          html += `<br><br>`;
        } else if (line !== '') {
          html += `<p>${line}</p>`;
        }
      });
    } else {
      html += `<p>${lines}</p>`;
    }
    html += `</div>`;
  });
  
  return html;
}

    // Display video function
    function displayVideo(videoId) {
      console.log('displayVideo called with ID:', videoId);
      
      const video = videoData.find(v => v.id === videoId);
      console.log('Found video:', video);
      
      if (!video) {
        console.error('Video not found for ID:', videoId);
        return;
      }

      // Update video info
      videoTitle.textContent = video.title;
      videoCategory.textContent = video.category;
      
      // Use the full embed URL directly
      console.log('Setting iframe src to:', video.vimeoEmbedUrl);
      videoIframe.src = video.vimeoEmbedUrl;
      videoIframe.title = video.title;

      // Handle authors/credits
      if (video.authors) {
        videoAuthors.textContent = video.authors;
        videoAuthors.style.display = 'block';
      } else {
        videoAuthors.style.display = 'none';
      }

      // Handle notes
      if (video.notes) {
        notesContent.textContent = video.notes;
        videoNotes.style.display = 'block';
      } else {
        videoNotes.style.display = 'none';
      }

      // Handle lyrics
      if (video.lyrics && Object.keys(video.lyrics).length > 0) {
        lyricsContent.innerHTML = renderLyrics(video.lyrics);
        videoLyrics.style.display = 'block';
      } else {
        videoLyrics.style.display = 'none';
      }

      // Show video content, hide placeholder
      console.log('Showing video content, hiding placeholder');
      videoPlaceholder.style.display = 'none';
      videoContent.style.display = 'block';

      // Scroll to video on mobile
      if (window.innerWidth <= 1024) {
        document.getElementById('video-display').scrollIntoView({
          behavior: 'smooth'
        });
      }
    }

    // Video item click handlers
    videoItems.forEach((item, index) => {
      console.log(`Setting up click handler for item ${index}:`, item);
      
      item.addEventListener('click', function() {
        console.log('Video item clicked!', this);
        
        // Remove active class from all items
        videoItems.forEach(i => i.classList.remove('active'));
        
        // Add active class to clicked item
        this.classList.add('active');
        
        // Display the video
        const videoId = this.getAttribute('data-video-id');
        console.log('Video ID from clicked item:', videoId);
        displayVideo(videoId);
      });
    });

    // Search functionality
    if (searchInput) {
      searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        
        videoItems.forEach(item => {
          const title = item.getAttribute('data-title');
          const description = item.querySelector('.video-description')?.textContent.toLowerCase() || '';
          
          if (title.includes(searchTerm) || description.includes(searchTerm)) {
            item.style.display = '';
          } else {
            item.style.display = 'none';
          }
        });
        
        // Show/hide letter sections
        document.querySelectorAll('.letter-section').forEach(section => {
          const visibleItems = section.querySelectorAll('.video-item:not([style*="display: none"])').length;
          section.style.display = visibleItems > 0 ? '' : 'none';
        });
      });
    }

    // Filter functionality
    filterButtons.forEach(button => {
      button.addEventListener('click', function() {
        // Update active button
        filterButtons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        
        const filter = this.getAttribute('data-filter');
        
        // Filter videos
        videoItems.forEach(item => {
          const category = item.getAttribute('data-category');
          if (filter === 'all' || category === filter) {
            item.style.display = '';
          } else {
            item.style.display = 'none';
          }
        });
        
        // Show/hide letter sections
        document.querySelectorAll('.letter-section').forEach(section => {
          const visibleItems = section.querySelectorAll('.video-item:not([style*="display: none"])').length;
          section.style.display = visibleItems > 0 ? '' : 'none';
        });
      });
    });

    // Smooth scrolling for alphabet links
    document.querySelectorAll('.letter-link').forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const targetId = this.getAttribute('href');
        const targetElement = document.querySelector(targetId);
        if (targetElement) {
          targetElement.scrollIntoView({ behavior: 'smooth' });
        }
      });
    });
  </script>
</BaseLayout>

<style lang="less">
  /* Typography */
  .cinzel {
    font-family: "Cinzel", "Arial", serif;
    font-weight: 400;
  }
  
  .divider {
    width: 100px;
    max-width: 90%;
    height: 2px;
    background-color: #fff;
    margin: 2rem auto;
    border-radius: 1.5px;
  }

  /* Hero Section */
  #library-hero {
    position: relative;
    height: 75vh;
    min-height: 300px;
    width: 100%;
    background-image: url('/assets/images/coa1.jpg');
    background-size: cover;
    background-position: center;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    text-align: center;
    
    @media (max-width: 768px) {
      height: auto;
      min-height: 250px;
      padding: 3rem 1rem;
    }
  }
  
  .hero-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(199, 199, 199, 0.6);
    z-index: 1;
  }
  
  .hero-content {
    position: relative;
    z-index: 2;
    max-width: 800px;
    padding: 0 1rem;
    
    h1 {
      font-size: clamp(2.5rem, 5vw, 4rem);
      margin: 0;
    }
    
    .hero-description {
      font-size: clamp(1.1rem, 2vw, 1.3rem);
      max-width: 600px;
      margin: 0 auto;
    }
  }

  /* Library Content Section */
  #library-content {
    padding: var(--sectionPadding);
    
    .cs-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 1rem;
      display: flex;
      gap: 2rem;
      
      @media (max-width: 1024px) {
        flex-direction: column;
      }
    }
  }
  
  /* Library Index (Left Column) */
  .library-index {
    flex: 1;
    max-width: 500px;
    
    @media (max-width: 1024px) {
      max-width: 100%;
    }
  }
  
  /* Search */
  .search-container {
    margin-bottom: 2rem;
    
    .search-input {
      width: 100%;
      padding: 1rem;
      font-size: 1rem;
      border: 1px solid #ddd;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      
      &:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 2px rgba(var(--primary-rgb), 0.2);
      }
    }
  }
  
  /* Filters */
  .filter-container {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 2rem;
    
    .filter-btn {
      padding: 0.75rem 1.5rem;
      background-color: #f0f0f0;
      border: none;
      border-radius: 30px;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      
      &:hover {
        background-color: #e0e0e0;
      }
      
      &.active {
        background-color: var(--primary);
        color: white;
      }
    }
  }
  
  /* Alphabet Index */
  .alphabet-index {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.5rem;
    margin-bottom: 2rem;
    padding: 1rem;
    background-color: var(--primary);
    border-radius: 8px;
    
    .letter-link {
      display: flex;
      justify-content: center;
      align-items: center;
      width: 2.5rem;
      height: 2.5rem;
      font-size: 1.2rem;
      font-weight: bold;
      color: white;
      text-decoration: none;
      border-radius: 50%;
      transition: all 0.3s ease;
      
      &:hover {
        background-color: rgba(255, 255, 255, 0.2);
        transform: scale(1.1);
      }
    }
  }
  
  /* Letter Sections */
  .letter-section {
    margin-bottom: 3rem;
    
    .letter-heading {
      font-size: 1.8rem;
      font-weight: bold;
      color: var(--primary);
      padding-bottom: 0.5rem;
      border-bottom: 2px solid var(--primary);
      margin-bottom: 1.5rem;
    }
  }
  
  /* Video List */
  .video-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  /* Video Items */
  .video-item {
    padding: 1rem;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    cursor: pointer;
    transition: all 0.3s ease;
    
    &:hover {
      transform: translateX(5px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }
    
    &.active {
      border-left: 4px solid var(--primary);
      background-color: rgba(var(--primary-rgb), 0.05);
    }
    
    .video-title {
      font-size: 1.2rem;
      margin: 0 0 0.5rem;
    }
    
    .video-category {
      display: inline-block;
      padding: 0.2rem 0.6rem;
      background-color: #f0f0f0;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 500;
      margin-bottom: 0.5rem;
    }
    
    .video-description {
      margin: 0;
      font-size: 0.9rem;
      color: #666;
    }
  }
  
  /* Video Display (Right Column) */
  .video-display {
    flex: 2;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    padding: 2rem;
    min-height: auto;
    position: sticky;
    top: 2rem;
    
    @media (max-width: 1024px) {
      position: static;
    }
  }
  
  /* Video Placeholder */
  .video-placeholder {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    color: #999;
    text-align: center;
    
    .placeholder-icon {
      font-size: 4rem;
      margin-bottom: 1rem;
      color: #ddd;
    }
    
    p {
      font-size: 1.2rem;
    }
  }
  
  /* Video Content */
  .video-content {
    .video-display-title {
      font-size: 2rem;
      margin: 0 0 0.5rem;
      color: var(--primary);
    }
    
    .video-display-category {
      display: inline-block;
      padding: 0.3rem 0.8rem;
      background-color: var(--primary);
      color: white;
      border-radius: 20px;
      font-size: 0.9rem;
      font-weight: 500;
      margin-bottom: 1.5rem;
    }

    .video-authors {
    font-style: italic;
    color: #666;
    margin-bottom: 2.5rem; /* This controls spacing before the video */
    font-size: 1rem;
  }
  }
  
  /* Video Player */
  .video-player-container {
    position: relative;
    width: 100%;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    margin-bottom: 2rem;
    
    .video-iframe {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: 8px;
    }
  }
  
  /* Video Details */
  .video-details {
    .video-notes {
      margin-bottom: 2rem;
      
      h3 {
        font-size: 1.5rem;
        margin-bottom: 1rem;
        color: var(--primary);
      }
      
      p {
        line-height: 1.6;
      }
    }

    
    
    .video-lyrics {
      h3 {
        font-size: 1.5rem;
        margin-bottom: 1rem;
        color: var(--primary);
      }
    }
  }
  
/* New Lyrics Structure */
.lyrics-content {
  display: flex;
  gap: 3rem; /* Increased gap between columns */
  flex-wrap: wrap;
  
  @media (max-width: 768px) {
    flex-direction: column;
    gap: 2rem;
  }
}
  
.lyrics-section {
  flex: 1;
  min-width: 10rem;
  max-width: none;
  
  @media (min-width: 1200px) {
    min-width: 10rem;
  }
  
  h4 {
    font-size: 1.2rem;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #eee;
    color: var(--primary);
  }
  
  p {
    margin-bottom: 0.5rem;
    line-height: 1.6;
    font-size: 1rem;
    
    &.after-break {
      margin-top: 1.5rem; /* Extra spacing for verse breaks */
    }
  }
}
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .alphabet-index .letter-link {
      width: 2rem;
      height: 2rem;
      font-size: 1rem;
    }
    
    .video-display {
      padding: 1.5rem;
    }
  }
</style>