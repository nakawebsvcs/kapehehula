---
import BaseLayout from "../layouts/BaseLayout.astro";

// Server-side authentication check
const accessToken = Astro.cookies.get("sb-access-token")?.value;
const refreshToken = Astro.cookies.get("sb-refresh-token")?.value;
const isLoggedIn = !!accessToken;

// Redirect if not logged in
if (!isLoggedIn) {
  return Astro.redirect("/");
}

// Import a default image to use for preloading
import defaultImage from "../assets/images/header-logo.png";

// Create a simple object with the src property
const optimizedImage = { src: defaultImage.src };

// Get Supabase credentials for client-side use
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
---

<BaseLayout
  title="Admin Panel - Hālau Hula Malani O Kapehe"
  description="Admin panel for user management"
  preloadedImage={optimizedImage}
>
  <!-- Add Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Add Bootstrap Icons -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">
  
  <!-- Admin content area -->
  <div class="admin-content">
    <div class="container py-5">
      <h1 class="mb-4">Admin Panel</h1>
      
      <div id="admin-panel" class="admin-panel">
        <!-- Initial loading state -->
        <div class="text-center p-5 my-5">
          <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
          </div>
          <h5 class="mt-3">Initializing admin panel...</h5>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Hidden token field for direct access -->
  <div id="auth-data" 
       data-access-token={accessToken} 
       data-refresh-token={refreshToken}
       style="display: none;"></div>
</BaseLayout>

<style lang="less">
  .admin-content {
    padding-top: 4rem; // Increased from 2rem for more top margin
    padding-bottom: 3rem;
    
    h1 {
      color: var(--primary);
      font-family: "Afacad", Arial, sans-serif;
    }
  }
  
  .admin-panel {
    margin-top: 1.5rem;
  }
</style>

<script define:vars={{ supabaseUrl, supabaseAnonKey }}>
  // Self-executing function to avoid global scope pollution
  (async function() {
    // Get tokens from the hidden field (passed directly from server)
    const authData = document.getElementById('auth-data');
    const accessToken = authData?.dataset.accessToken;
    const refreshToken = authData?.dataset.refreshToken;
    
    // If we don't have an access token, we can't proceed
    if (!accessToken) {
      renderNotAuthorized('No authentication token found. Please log in again.');
      return;
    }
    
    // State variables
    let users = [];
    let filteredUsers = [];
    let searchTerm = '';
    let loading = false;
    let error = null;
    let success = null;
    
    // Create headers for Supabase API requests
    const headers = {
      'Content-Type': 'application/json',
      'apikey': supabaseAnonKey,
      'Authorization': `Bearer ${accessToken}`
    };
    
    // Try to get user information directly
    try {
      const response = await fetch(`${supabaseUrl}/auth/v1/user`, {
        headers
      });
      
      if (!response.ok) {
        renderNotAuthorized('Authentication failed: ' + response.statusText);
        return;
      }
      
      const userData = await response.json();
      
      if (!userData || !userData.id) {
        renderNotAuthorized('Invalid user data received');
        return;
      }
      
      // Initialize the admin panel
      initAdminPanel(userData);
      
    } catch (err) {
      renderError('Error fetching user data: ' + err.message);
    }
    
    // Initialize the admin panel
    async function initAdminPanel(user) {
      // Get the admin panel container
      const adminPanel = document.getElementById('admin-panel');
      
      if (!adminPanel) {
        return;
      }
      
      // Render the admin panel UI
      renderAdminPanel(user?.email);
      
      // Fetch users from Supabase
      await fetchUsers();
    }
    
    // Fetch users from Supabase
    async function fetchUsers() {
      try {
        loading = true;
        updateUsersTable();
        
        // Fetch all users from Supabase Auth
        const response = await fetch(`${supabaseUrl}/auth/v1/admin/users`, {
          headers
        });
        
        if (!response.ok) {
          throw new Error(`Failed to fetch users: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        // Transform the data to match our expected format
        users = data.users.map(user => ({
          uid: user.id,
          email: user.email,
          role: user.app_metadata?.role || 'user'
        }));
        
        filteredUsers = [...users];
        
        loading = false;
        updateUsersTable();
      } catch (err) {
        error = `Error fetching users: ${err.message}`;
        loading = false;
        updateUsersTable();
      }
    }
    
    // Render the admin panel UI
    function renderAdminPanel(userEmail) {
      const adminPanel = document.getElementById('admin-panel');
      
      adminPanel.innerHTML = `
        <div class="container-fluid p-0">
          <div id="alert-container"></div>
          
          <div class="row">
            <div class="col-md-4 col-lg-3">
              <div class="card">
                <div class="card-header">
                  <h5 class="mb-0">Invite New User</h5>
                </div>
                <div class="card-body">
                  <form id="invite-form">
                    <div class="mb-3">
                      <label for="new-user-email" class="form-label">Email:</label>
                      <input 
                        type="email" 
                        class="form-control" 
                        id="new-user-email" 
                        required 
                        placeholder="user@example.com"
                      >
                    </div>
                    <div class="mb-3">
                      <label for="new-user-role" class="form-label">Role:</label>
                      <select id="new-user-role" class="form-select">
                        <option value="user">User</option>
                        <option value="admin">Admin</option>
                      </select>
                    </div>
                    <button 
                      type="submit" 
                      id="invite-btn" 
                      class="btn btn-success w-100"
                    >
                      Invite User
                    </button>
                  </form>
                </div>
              </div>
            </div>
            
            <div class="col-md-8 col-lg-9">
              <div class="card">
                <div class="card-header">
                  <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">User List</h5>
                    <div class="input-group" style="width: 300px;">
                      <span class="input-group-text">
                        <i class="bi bi-search"></i>
                      </span>
                      <input 
                        type="text" 
                        id="search-input" 
                        class="form-control" 
                        placeholder="Search users..."
                      >
                      <button id="clear-search" class="btn btn-outline-secondary">
                        <i class="bi bi-x"></i>
                      </button>
                    </div>
                  </div>
                </div>
                <div class="card-body">
                  <div id="users-table-container">
                    <div class="text-center p-4">
                      <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                      </div>
                      <p class="mt-2">Loading users...</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Add event listeners
      document.getElementById('invite-form')?.addEventListener('submit', handleInviteUser);
      document.getElementById('search-input')?.addEventListener('input', handleSearch);
      document.getElementById('clear-search')?.addEventListener('click', clearSearch);
    }
    
    // Update the users table with current data
    function updateUsersTable() {
      const tableContainer = document.getElementById('users-table-container');
      if (!tableContainer) return;
      
      if (loading) {
        tableContainer.innerHTML = `
          <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading users...</p>
          </div>
        `;
        return;
      }
      
      if (error) {
        tableContainer.innerHTML = `
          <div class="alert alert-danger">
            ${error}
          </div>
        `;
        return;
      }
      
      if (filteredUsers.length === 0) {
        tableContainer.innerHTML = `
          <div class="alert alert-info">
            ${searchTerm ? "No users match your search" : "No users found"}
          </div>
        `;
        return;
      }
      
      tableContainer.innerHTML = `
        <div class="table-responsive">
          <table class="table table-striped table-hover">
            <thead>
              <tr>
                <th>Email</th>
                <th>Role</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              ${filteredUsers.map(user => `
                <tr>
                  <td>${user.email}</td>
                  <td>
                    <span class="badge ${user.role === 'admin' ? 'bg-primary' : 'bg-secondary'}">
                      ${user.role}
                    </span>
                  </td>
                  <td>
                    <button 
                      class="btn btn-danger btn-sm delete-user" 
                      data-uid="${user.uid}"
                    >
                      <i class="bi bi-trash"></i> Delete
                    </button>
                  </td>
                </tr>
              `).join('')}
            </tbody>
          </table>
        </div>
      `;
      
      // Add event listeners to delete buttons
      document.querySelectorAll('.delete-user').forEach(button => {
        button.addEventListener('click', () => {
          const uid = button.dataset.uid;
          handleDeleteUser(uid);
        });
      });
    }
    
    // Handle search input
    function handleSearch(e) {
      searchTerm = e.target.value.toLowerCase();
      
      if (searchTerm.trim() === '') {
        filteredUsers = [...users];
      } else {
        filteredUsers = users.filter(user => 
          user.email.toLowerCase().includes(searchTerm) || 
          user.role.toLowerCase().includes(searchTerm)
        );
      }
      
      updateUsersTable();
    }
    
    // Clear search
    function clearSearch() {
      const searchInput = document.getElementById('search-input');
      if (searchInput) searchInput.value = '';
      searchTerm = '';
      filteredUsers = [...users];
      updateUsersTable();
    }
    
    // Handle invite user form submission
    async function handleInviteUser(e) {
      e.preventDefault();
      
      const emailInput = document.getElementById('new-user-email');
      const roleSelect = document.getElementById('new-user-role');
      
      if (!emailInput || !roleSelect) return;
      
      const email = emailInput.value;
      const role = roleSelect.value;
      
      // Show loading state
      loading = true;
      updateUsersTable();
      
      try {
        // Invite user via Supabase Admin API
        const response = await fetch(`${supabaseUrl}/auth/v1/admin/users`, {
          method: 'POST',
          headers,
          body: JSON.stringify({
            email,
            app_metadata: { role },
            user_metadata: {},
            email_confirm: true
          })
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Failed to invite user');
        }
        
        // Show success message
        success = "User invited successfully! A set password email has been sent.";
        showAlert(success, 'success');
        
        // Clear form
        emailInput.value = '';
        
        // Refresh user list
        await fetchUsers();
      } catch (err) {
        error = `Error inviting user: ${err.message}`;
        showAlert(error, 'danger');
        loading = false;
        updateUsersTable();
      }
    }
    
    // Handle delete user
    async function handleDeleteUser(uid) {
      if (!confirm('Are you sure you want to delete this user?')) return;
      
      // Show loading state
      loading = true;
      updateUsersTable();
      
      try {
        // Delete user via Supabase Admin API
        const response = await fetch(`${supabaseUrl}/auth/v1/admin/users/${uid}`, {
          method: 'DELETE',
          headers
        });
        
        if (!response.ok) {
          throw new Error(`Failed to delete user: ${response.statusText}`);
        }
        
        // Show success message
        success = "User deleted successfully";
        showAlert(success, 'success');
        
        // Refresh user list
        await fetchUsers();
      } catch (err) {
        error = `Error deleting user: ${err.message}`;
        showAlert(error, 'danger');
        loading = false;
        updateUsersTable();
      }
    }
    
    // Show alert message
    function showAlert(message, type = 'info') {
      const alertContainer = document.getElementById('alert-container');
      if (!alertContainer) return;
      
      alertContainer.innerHTML = `
        <div class="alert alert-${type} alert-dismissible fade show" role="alert">
          ${message}
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      `;
      
      // Auto-dismiss after 5 seconds
      setTimeout(() => {
        const alert = alertContainer.querySelector('.alert');
        if (alert) {
          alert.classList.remove('show');
          setTimeout(() => {
            alertContainer.innerHTML = '';
          }, 150);
        }
      }, 5000);
    }
    
    // Render not authorized message
    function renderNotAuthorized(message) {
      const adminPanel = document.getElementById('admin-panel');
      
      adminPanel.innerHTML = `
        <div class="container-fluid">
          <div class="alert alert-danger my-5">
            <h3 class="h5">Not Authorized</h3>
            <p>${message}</p>
            <a href="/" class="btn btn-primary mt-2">Return to Home</a>
          </div>
        </div>
      `;
    }
    
    // Render error message
    function renderError(message) {
      const adminPanel = document.getElementById('admin-panel');
      
      adminPanel.innerHTML = `
        <div class="container-fluid">
          <div class="alert alert-danger my-5">
            <h3 class="h5">Error</h3>
            <p>${message}</p>
            <a href="/" class="btn btn-primary mt-2">Return to Home</a>
          </div>
        </div>
      `;
    }
  })();
</script>

<!-- Add Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
