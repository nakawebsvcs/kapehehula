---
import BaseLayout from "../layouts/BaseLayout.astro";
import defaultImage from "../assets/images/header-logo.png";
const optimizedImage = { src: defaultImage.src };
---

<BaseLayout
  title="Admin Panel - Hālau Hula Malani O Kapehe"
  description="Admin panel for user management"
  preloadedImage={optimizedImage}
>
  <div class="admin-content">
    <div class="container-fluid" style="padding-top: 2rem;">
      <!-- Initialization Loader -->
      <div id="initialization-loader" class="text-center p-4">
        <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
          <span class="visually-hidden">Loading...</span>
        </div>
        <h5 class="mt-2">Initializing admin panel...</h5>
      </div>

      <!-- Main Admin Panel -->
      <div id="admin-panel" class="admin-panel" style="display: none;">
        <!-- Header Row -->
        <div class="row mb-4">
          <div class="col">
            <div class="d-flex justify-content-between align-items-center">
              <h2 class="mt-2">User Management</h2>
              <button id="logout-btn" class="btn btn-outline-secondary logout-btn">
                <i class="bi bi-box-arrow-right me-1"></i> Logout
              </button>
            </div>
          </div>
        </div>

        <!-- Alerts -->
        <div id="error-alert" class="alert alert-danger" style="display: none;"></div>
        <div id="success-alert" class="alert alert-success" style="display: none;"></div>

        <!-- Main Content Row -->
        <div class="row">
          <!-- Left Column - Invite User Form -->
          <div class="col-md-4 col-lg-3">
            <div class="card mb-4">
              <div class="card-header">
                <h5>Invite New User</h5>
              </div>
              <div class="card-body">
                <form id="invite-user-form">
                  <div class="mb-3">
                    <label for="new-user-email" class="form-label">Email:</label>
                    <input type="email" class="form-control" id="new-user-email" required>
                  </div>
                  <div class="mb-3">
                    <label for="new-user-role" class="form-label">Role:</label>
                    <select class="form-select" id="new-user-role">
                      <option value="user">User</option>
                      <option value="admin">Admin</option>
                    </select>
                  </div>
                  <button type="submit" id="invite-btn" class="btn btn-success w-100">
                    Invite User
                  </button>
                </form>
              </div>
            </div>
          </div>

          <!-- Right Column - User List -->
          <div class="col-md-8 col-lg-9">
            <div class="card">
              <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                  <h5 class="mb-0">User List</h5>
                  <div class="input-group" style="width: 300px;">
                    <span class="input-group-text">
                      <i class="bi bi-search"></i>
                    </span>
                    <input type="text" class="form-control" placeholder="Search users..." id="search-input">
                    <button class="btn btn-outline-secondary" type="button" id="clear-search" style="display: none;">
                      <i class="bi bi-x"></i>
                    </button>
                  </div>
                </div>
              </div>
              <div class="card-body">
                <!-- Loading State -->
                <div id="users-loading" style="display: none;">
                  <p>Loading users...</p>
                </div>

                <!-- No Users Alert -->
                <div id="no-users-alert" class="alert alert-info" style="display: none;">
                  No users found
                </div>

                <!-- Users Table -->
                <div id="users-table-container" class="table-responsive" style="display: none;">
                  <table class="table table-striped table-hover">
                    <thead>
                      <tr>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Actions</th>
                      </tr>
                    </thead>
                    <tbody id="users-table-body">
                      <!-- Users will be populated here -->
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<!-- Add Bootstrap CSS and JS via CDN -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">

<style lang="less">
  .admin-content {
    padding-top: 4rem;
    padding-bottom: 3rem;
    min-height: 100vh;
    background-color: #f8f9fa;
    
    h1, h2 {
      color: var(--primary);
      font-family: "Afacad", Arial, sans-serif;
      font-weight: 600;
    }
  }

  // Loading spinner improvements
  #initialization-loader {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(10px);
    
    h5 {
      color: var(--primary);
      font-family: "Afacad", Arial, sans-serif;
    }
  }
  
  .admin-panel {
    animation: fadeIn 0.5s ease-in-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  // Card improvements
  .card {
    border: none;
    border-radius: 15px;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease;
    overflow: hidden;
    
    &:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
    }

    .card-header {
      background-color: var(--primary);
      color: white;
      border: none;
      padding: 1.25rem 1.5rem;
      
      h5 {
        margin: 0;
        font-family: "Afacad", Arial, sans-serif;
        font-weight: 600;
      }
    }

    .card-body {
      padding: 1.5rem;
      background: white;
    }
  }

  // Form improvements
  .form-label {
    font-weight: 600;
    color: #495057;
    margin-bottom: 0.5rem;
  }

  .form-control, .form-select {
    border: 2px solid #e9ecef;
    border-radius: 10px;
    padding: 0.75rem 1rem;
    transition: all 0.3s ease;
    
    &:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(var(--primary-rgb), 0.25);
    }
  }

  // Button improvements
  .btn {
    border-radius: 10px;
    font-weight: 600;
    padding: 0.75rem 1.5rem;
    transition: all 0.3s ease;
    border: none;
    
    &.btn-success {
      background-color: #28a745;
      
      &:hover {
        background-color: #218838;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
      }
    }

    &.btn-danger {
      background-color: #dc3545;
      
      &:hover {
        background-color: #c82333;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
      }
    }

    &.btn-outline-secondary {
      border: 2px solid var(--primary);
      color: var(--primary);
      background: transparent;
      
      &:hover {
        background: var(--primary);
        border-color: var(--primary);
        color: white;
        transform: translateY(-1px);
      }
    }
  }

  // Alert improvements
  .alert {
    border: none;
    border-radius: 12px;
    padding: 1rem 1.5rem;
    margin-bottom: 1.5rem;
    font-weight: 500;
    
    &.alert-danger {
      background-color: #f8d7da;
      color: #721c24;
    }
    
    &.alert-success {
      background-color: #d4edda;
      color: #155724;
    }
    
    &.alert-info {
      background-color: #d1ecf1;
      color: #0c5460;
    }
  }

  // Badge improvements
  .badge {
    padding: 0.5rem 0.75rem;
    border-radius: 8px;
    font-weight: 600;
    font-size: 0.75rem;
    
    &.bg-primary {
      background-color: var(--primary) !important;
    }
    
    &.bg-secondary {
      background-color: #6c757d !important;
    }
  }

  // Table improvements
  .table-responsive {
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  }

  .table {
    margin: 0;
    
    thead th {
      background-color: #f8f9fa;
      border: none;
      color: #495057;
      font-weight: 700;
      padding: 1rem 1.25rem;
      text-transform: uppercase;
      font-size: 0.8rem;
      letter-spacing: 0.5px;
    }
    
    tbody tr {
      transition: all 0.2s ease;
      
      &:hover {
        background-color: #f8f9fa;
        transform: scale(1.01);
      }
      
      td {
        padding: 1rem 1.25rem;
        border-color: #f1f3f4;
        vertical-align: middle;
      }
    }
  }

  // Search input improvements
  .input-group {
    .input-group-text {
      background: white;
      border: 2px solid #e9ecef;
      border-right: none;
      border-radius: 10px 0 0 10px;
      color: #6c757d;
    }
    
    .form-control {
      border-left: none;
      border-radius: 0 10px 10px 0;
      
      &:focus {
        border-left: none;
      }
    }
    
    .btn {
      border-radius: 0 10px 10px 0;
      border: 2px solid #e9ecef;
      border-left: none;
    }
  }

  // Loading states
  .spinner-border {
    &.text-primary {
      color: var(--primary) !important;
    }
  }

  // Responsive improvements
  @media (max-width: 768px) {
    .admin-content {
      padding-top: 2rem;
      
      .card {
        margin-bottom: 1rem;
      }
      
      .table-responsive {
        font-size: 0.9rem;
      }
      
      .btn {
        padding: 0.5rem 1rem;
        font-size: 0.9rem;
      }
    }
    
    .input-group {
      width: 100% !important;
      margin-top: 1rem;
    }
  }

  // Custom scrollbar for table
  .table-responsive::-webkit-scrollbar {
    height: 8px;
  }
  
  .table-responsive::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
  }
  
  .table-responsive::-webkit-scrollbar-thumb {
    background: var(--primary);
    border-radius: 10px;
    
    &:hover {
      background: #1a5490;
    }
  }
</style>

<script>
  import { auth, functions } from '../lib/firebase.js';
  import { onAuthStateChanged, signOut, sendPasswordResetEmail } from 'firebase/auth';
  import { httpsCallable } from 'firebase/functions';

  class AdminPanel {
    constructor() {
      this.users = [];
      this.filteredUsers = [];
      this.searchTerm = '';
      this.loading = false;
      this.initializing = true;
      
      this.initializeElements();
      this.setupEventListeners();
      this.setupAuthListener();
    }

    initializeElements() {
      this.elements = {
        initLoader: document.getElementById('initialization-loader'),
        adminPanel: document.getElementById('admin-panel'),
        errorAlert: document.getElementById('error-alert'),
        successAlert: document.getElementById('success-alert'),
        logoutBtn: document.getElementById('logout-btn'),
        inviteForm: document.getElementById('invite-user-form'),
        newUserEmail: document.getElementById('new-user-email'),
        newUserRole: document.getElementById('new-user-role'),
        inviteBtn: document.getElementById('invite-btn'),
        searchInput: document.getElementById('search-input'),
        clearSearchBtn: document.getElementById('clear-search'),
        usersLoading: document.getElementById('users-loading'),
        noUsersAlert: document.getElementById('no-users-alert'),
        usersTableContainer: document.getElementById('users-table-container'),
        usersTableBody: document.getElementById('users-table-body')
      };
    }

    setupEventListeners() {
      this.elements.logoutBtn.addEventListener('click', () => this.handleLogout());
      this.elements.inviteForm.addEventListener('submit', (e) => this.inviteUser(e));
      this.elements.searchInput.addEventListener('input', (e) => this.handleSearch(e.target.value));
      this.elements.clearSearchBtn.addEventListener('click', () => this.clearSearch());
    }

    setupAuthListener() {
      console.log('Setting up auth state listener...');
      onAuthStateChanged(auth, async (user) => {
        console.log('Auth state changed. Current user:', user ? user.email : 'none');
        
        if (user) {
          console.log('User authenticated in AdminPanel');
          try {
            console.log('Forcing token refresh...');
            await user.getIdToken(true);
            console.log('Token refreshed successfully');
            
            setTimeout(() => {
              console.log('Attempting to fetch users after delay...');
              this.setLoading(true);
              this.fetchUsers();
              this.showAdminPanel();
            }, 1500);
          } catch (error) {
            console.error('Error refreshing token:', error);
            this.showError('Authentication error: ' + error.message);
            this.showAdminPanel();
            this.setLoading(false);
          }
        } else {
          console.log('User signed out or not authenticated in AdminPanel');
          this.users = [];
          this.filteredUsers = [];
          this.setLoading(false);
          this.showAdminPanel();
          this.showError('Please sign in to view user data.');
        }
      });
    }

    showAdminPanel() {
      this.initializing = false;
      this.elements.initLoader.style.display = 'none';
      this.elements.adminPanel.style.display = 'block';
    }

    setLoading(loading) {
      this.loading = loading;
      this.elements.inviteBtn.disabled = loading;
      this.elements.inviteBtn.textContent = loading ? 'Inviting...' : 'Invite User';
      this.elements.usersLoading.style.display = loading ? 'block' : 'none';
    }

    showError(message) {
      this.elements.errorAlert.textContent = message;
      this.elements.errorAlert.style.display = 'block';
      this.elements.successAlert.style.display = 'none';
    }

    showSuccess(message) {
      this.elements.successAlert.textContent = message;
      this.elements.successAlert.style.display = 'block';
      this.elements.errorAlert.style.display = 'none';
    }

    hideAlerts() {
      this.elements.errorAlert.style.display = 'none';
      this.elements.successAlert.style.display = 'none';
    }

    async fetchUsers() {
      this.setLoading(true);
      this.hideAlerts();
      
      try {
        if (!auth.currentUser) {
          throw new Error('No authenticated user found');
        }

        const token = await auth.currentUser.getIdToken();
        console.log('Current user token (first 20 chars):', token.substring(0, 20));

        const decodedToken = await auth.currentUser.getIdTokenResult();
        console.log('User claims:', decodedToken.claims);

        const getUsersFunction = httpsCallable(functions, 'getUsers');
        console.log('Attempting to call getUsers Cloud Function...');
        
        const result = await getUsersFunction();
        console.log('Function result:', result);
        
        const fetchedUsers = result.data.users || [];
        this.users = fetchedUsers;
        this.filteredUsers = fetchedUsers;
        this.renderUsers();
      } catch (error) {
        console.error('Error fetching users:', error);
        if (error.code === 'functions/unauthenticated') {
          this.showError('Authentication failed. Please log in again.');
        } else {
          this.showError('Failed to load users: ' + error.message);
        }
      } finally {
        this.setLoading(false);
      }
    }

    async inviteUser(e) {
      e.preventDefault();
      this.setLoading(true);
      this.hideAlerts();

      const email = this.elements.newUserEmail.value;
      const role = this.elements.newUserRole.value;

      try {
        if (auth.currentUser) {
          await auth.currentUser.getIdToken(true);
        }

        console.log('Attempting to call inviteUser Cloud Function...');
        const inviteUserFunction = httpsCallable(functions, 'inviteUser');
        const result = await inviteUserFunction({ email, role });

        if (result.data.success) {
          await sendPasswordResetEmail(auth, result.data.email);
          this.showSuccess('User invited successfully! A set password email has been sent.');
          this.elements.newUserEmail.value = '';
          this.fetchUsers();
        }
      } catch (error) {
        console.error('Error inviting user:', error);
        if (error.code === 'functions/unauthenticated') {
          this.showError('Authentication failed to invite user. Please log in again.');
        } else if (error.code === 'functions/permission-denied') {
          this.showError('Permission denied to invite user.');
        } else {
          this.showError('Failed to invite user: ' + error.message);
        }
      } finally {
        this.setLoading(false);
      }
    }

    async handleDeleteUser(userId) {
      if (!confirm('Are you sure you want to delete this user?')) {
        return;
      }

      this.setLoading(true);
      this.hideAlerts();

      try {
        if (auth.currentUser) {
          await auth.currentUser.getIdToken(true);
        }

        console.log(`Attempting to call deleteUser Cloud Function for UID: ${userId}`);
        const deleteUserFunction = httpsCallable(functions, 'deleteUser');
        await deleteUserFunction({ uid: userId });

        this.showSuccess('User deleted successfully');
        this.fetchUsers();
      } catch (error) {
        console.error('Error deleting user:', error);
        if (error.code === 'functions/unauthenticated') {
          this.showError('Authentication failed to delete user. Please log in again.');
        } else if (error.code === 'functions/permission-denied') {
          this.showError('Permission denied to delete user.');
        } else {
          this.showError('Failed to delete user: ' + error.message);
        }
      } finally {
        this.setLoading(false);
      }
    }

    handleSearch(searchTerm) {
      this.searchTerm = searchTerm;
      this.elements.clearSearchBtn.style.display = searchTerm ? 'block' : 'none';
      this.filterUsers();
    }

    clearSearch() {
      this.elements.searchInput.value = '';
      this.searchTerm = '';
      this.elements.clearSearchBtn.style.display = 'none';
      this.filterUsers();
    }

    filterUsers() {
      if (this.searchTerm.trim() === '') {
        this.filteredUsers = this.users;
      } else {
        const lowercaseSearch = this.searchTerm.toLowerCase();
        this.filteredUsers = this.users.filter(user =>
          user.email.toLowerCase().includes(lowercaseSearch) ||
          user.role.toLowerCase().includes(lowercaseSearch)
        );
      }
      this.renderUsers();
    }

    renderUsers() {
      if (this.filteredUsers.length === 0) {
        this.elements.usersTableContainer.style.display = 'none';
        this.elements.noUsersAlert.style.display = 'block';
        this.elements.noUsersAlert.textContent = this.searchTerm
          ? 'No users match your search'
          : 'No users found';
      } else {
        this.elements.noUsersAlert.style.display = 'none';
        this.elements.usersTableContainer.style.display = 'block';
        
        // Clear existing table rows
        this.elements.usersTableBody.innerHTML = '';
        
        // Populate table with filtered users
        this.filteredUsers.forEach(user => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${user.email}</td>
            <td>
              <span class="badge ${user.role === 'admin' ? 'bg-primary' : 'bg-secondary'}">
                ${user.role}
              </span>
            </td>
            <td>
              <button class="btn btn-danger btn-sm delete-user-btn" data-user-id="${user.uid}">
                <i class="bi bi-trash"></i> Delete
              </button>
            </td>
          `;
          this.elements.usersTableBody.appendChild(row);
        });
        
        // Add event listeners to delete buttons
        this.elements.usersTableBody.querySelectorAll('.delete-user-btn').forEach(btn => {
          btn.addEventListener('click', (e) => {
            const userId = e.currentTarget.getAttribute('data-user-id');
            this.handleDeleteUser(userId);
          });
        });
      }
    }

    async handleLogout() {
      try {
        console.log('Signing out...');
        await signOut(auth);
        console.log('Sign out successful.');
        // Redirect to login page or home page
        window.location.href = '/login'; // Adjust this path as needed
      } catch (error) {
        console.error('Error signing out:', error);
        this.showError('Error signing out: ' + error.message);
      }
    }
  }

  // Initialize the admin panel when the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, initializing AdminPanel...');
    new AdminPanel();
  });
</script>