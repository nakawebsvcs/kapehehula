---
// No props needed for this basic implementation
---

<div id="signin-lightbox" class="lightbox">
  <div class="lightbox-content">
    <button class="close-button" aria-label="Close sign in form" type="button">×</button>
    <h2>Sign In</h2>
    <form id="signin-form" method="POST" action="/api/auth/TS%20signin" enctype="application/x-www-form-urlencoded">
      <div class="form-group">
        <label for="email">Email</label>
        <input type="email" id="email" name="email" required>
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <input type="password" id="password" name="password" required>
      </div>
      <div class="form-error" id="signin-error"></div>
      <button type="submit" class="submit-button">Sign In</button>
      
      <div class="form-note">
        <p>Site login is for hālau haumana only. If you are a haumana and need to request a login, email <a href="mailto:kapehehula@gmail.com">kapehehula@gmail.com</a></p>
      </div>
      
      <div class="forgot-password">
        <button type="button" id="forgot-password-btn">Forgot Password?</button>
      </div>
    </form>
  </div>
</div>

<style lang="less">
  .lightbox {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    z-index: 10001;
    justify-content: center;
    align-items: center;
    
    &.active {
      display: flex;
    }
    
    .lightbox-content {
      background-color: white;
      padding: 2rem;
      border-radius: 8px;
      width: 90%;
      max-width: 400px;
      position: relative;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
    }
    
    .close-button {
      position: absolute;
      top: 10px;
      right: 15px;
      font-size: 1.5rem;
      background: none;
      border: none;
      cursor: pointer;
      color: #666;
      
      &:hover {
        color: var(--primary);
      }
    }
    
    h2 {
      color: var(--primary);
      margin-bottom: 1.5rem;
      text-align: center;
    }
    
    .form-group {
      margin-bottom: 1.25rem;
      
      label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
      }
      
      input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
        
        &:focus {
          outline: none;
          border-color: var(--primary);
        }
      }
    }
    
    .form-error {
      color: #e74c3c;
      margin-bottom: 1rem;
      font-size: 0.875rem;
      min-height: 1.25rem;
    }
    
    .submit-button {
      width: 100%;
      padding: 0.75rem;
      background-color: var(--primary);
      color: white;
      border: none;
      border-radius: 4px;
      font-size: 1rem;
      cursor: pointer;
      transition: background-color 0.3s;
      
      &:hover {
        background-color: var(--primary);
        filter: brightness(0.9);
      }
    }
    
    .form-note {
      margin-top: 1.5rem;
      font-size: 0.85rem;
      color: #666;
      line-height: 1.4;
      
      a {
        color: var(--primary);
        text-decoration: none;
        
        &:hover {
          text-decoration: underline;
        }
      }
    }
    
    .forgot-password {
      margin-top: 1rem;
      text-align: center;
      
      button {
        background: none;
        border: none;
        color: var(--primary);
        font-size: 0.9rem;
        cursor: pointer;
        text-decoration: underline;
        padding: 0;
        
        &:hover {
          color: darken(#666, 15%);
        }
      }
    }
  }
</style>

<script>
  // Self-executing function to avoid global scope pollution
  (function() {
    // Named function for login modal initialization to prevent duplicate bindings
    function initLoginModal() {
      console.log('Initializing login modal');
      
      // Scoped element selection
      const lightbox = document.getElementById('signin-lightbox');
      if (!lightbox) {
        console.error('Signin lightbox not found!');
        return; // Exit if lightbox doesn't exist
      }
      
      console.log('Lightbox found:', lightbox);
      
      // Find elements within the lightbox for better scoping
      const closeButton = lightbox.querySelector('.close-button');
      const forgotPasswordBtn = document.getElementById('forgot-password-btn');
      
      // Find auth link in the header
      const authLink = document.getElementById('auth-link');
      
      // Set up auth link click handler if it exists
      if (authLink) {
        console.log('Auth link found, setting up click handler');
        
        // Remove any existing listeners to prevent duplicates
        authLink.removeEventListener('click', handleAuthLinkClick);
        
        // Add the click handler
        authLink.addEventListener('click', handleAuthLinkClick);
      } else {
        console.warn('Auth link not found in the DOM');
      }
      
      // Named handler function for auth link
      function handleAuthLinkClick(e) {
        e.preventDefault();
        console.log('Auth link clicked');
        
        // Use setTimeout to ensure DOM is fully processed
        setTimeout(() => {
          if (lightbox) {
            console.log('Opening login modal');
            lightbox.classList.add('active');
            document.body.classList.add('no-scroll');
          }
        }, 10);
      }
      
      // Set up close button handler
      if (closeButton) {
        closeButton.removeEventListener('click', handleCloseClick);
        closeButton.addEventListener('click', handleCloseClick);
      }
      
      // Named handler function for close button
      function handleCloseClick() {
        console.log('Close button clicked');
        lightbox.classList.remove('active');
        document.body.classList.remove('no-scroll');
      }
      
      // Set up lightbox background click handler
      lightbox.removeEventListener('click', handleLightboxClick);
      lightbox.addEventListener('click', handleLightboxClick);
      
      // Named handler function for lightbox background
      function handleLightboxClick(e) {
        if (e.target === lightbox) {
          console.log('Clicked outside form');
          lightbox.classList.remove('active');
          document.body.classList.remove('no-scroll');
        }
      }
      
      // Set up forgot password button handler
      if (forgotPasswordBtn) {
        forgotPasswordBtn.removeEventListener('click', handleForgotPassword);
        forgotPasswordBtn.addEventListener('click', handleForgotPassword);
      }
      
      // Named handler function for forgot password
      function handleForgotPassword() {
        alert('Please contact kapehehula@gmail.com to reset your password.');
      }
    }

    // Multiple event listeners to handle different page load scenarios
    
    // 1. For Astro view transitions
    document.addEventListener('astro:page-load', function() {
      console.log('astro:page-load event fired');
      initLoginModal();
    });
    
    // 2. For after view transitions complete
    document.addEventListener('astro:after-swap', function() {
      console.log('astro:after-swap event fired');
      // Small delay to ensure DOM is updated
      setTimeout(initLoginModal, 100);
    });
    
    // 3. Backup for direct navigation
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOMContentLoaded event fired');
      initLoginModal();
    });
    
    // 4. Immediate execution check for already loaded pages
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      console.log('Document already loaded, initializing immediately');
      // Small delay for immediate execution
      setTimeout(initLoginModal, 10);
    }
  })();
</script>


