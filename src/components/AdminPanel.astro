---
// No server-side props needed, we'll handle everything client-side
---

<div class="admin-container">
  <div id="admin-panel">
    <!-- Content will be rendered by JavaScript -->
    <div class="loading-indicator">
      <div class="spinner"></div>
      <p>Loading admin panel...</p>
    </div>
  </div>
</div>

<style lang="less">
  .admin-container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 1rem;
  }
  
  .loading-indicator {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem;
    
    .spinner {
      width: 3rem;
      height: 3rem;
      border: 4px solid rgba(0, 0, 0, 0.1);
      border-radius: 50%;
      border-top-color: var(--primary);
      animation: spin 1s linear infinite;
    }
    
    p {
      margin-top: 1rem;
      font-size: 1.2rem;
      color: #666;
    }
  }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  .admin-panel {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 1.5rem;
      background-color: #f8f9fa;
      border-bottom: 1px solid #e9ecef;
      
      h2 {
        margin: 0;
        color: var(--primary);
      }
      
      .logout-btn {
        padding: 0.5rem 1rem;
        background-color: transparent;
        border: 1px solid #ced4da;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s;
        
        &:hover {
          background-color: #f1f3f5;
        }
      }
    }
    
    .content {
      padding: 1.5rem;
      display: grid;
      grid-template-columns: 1fr 3fr;
      gap: 1.5rem;
      
      @media (max-width: 768px) {
        grid-template-columns: 1fr;
      }
    }
    
    .card {
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      
      .card-header {
        padding: 1rem;
        background-color: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
        font-weight: bold;
      }
      
      .card-body {
        padding: 1.5rem;
      }
    }
    
    .form-group {
      margin-bottom: 1rem;
      
      label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
      }
      
      input, select {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 1rem;
      }
    }
    
    .btn {
      padding: 0.75rem 1rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.2s;
      
      &.btn-primary {
        background-color: var(--primary);
        color: white;
        
        &:hover {
          filter: brightness(0.9);
        }
      }
      
      &.btn-danger {
        background-color: #dc3545;
        color: white;
        
        &:hover {
          filter: brightness(0.9);
        }
      }
      
      &.btn-success {
        background-color: #28a745;
        color: white;
        
        &:hover {
          filter: brightness(0.9);
        }
      }
      
      &:disabled {
        opacity: 0.7;
        cursor: not-allowed;
      }
    }
    
    .alert {
      padding: 1rem;
      margin-bottom: 1rem;
      border-radius: 4px;
      
      &.alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
      }
      
      &.alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
      }
      
      &.alert-info {
        background-color: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
      }
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      
      th, td {
        padding: 0.75rem;
        text-align: left;
        border-bottom: 1px solid #e9ecef;
      }
      
      th {
        background-color: #f8f9fa;
        font-weight: 600;
      }
      
      tr:hover {
        background-color: #f8f9fa;
      }
      
      .badge {
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 600;
        
        &.bg-primary {
          background-color: var(--primary);
          color: white;
        }
        
        &.bg-secondary {
          background-color: #6c757d;
          color: white;
        }
      }
    }
    
    .search-container {
      display: flex;
      margin-bottom: 1rem;
      
      input {
        flex: 1;
        padding: 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 4px 0 0 4px;
        font-size: 1rem;
      }
      
      button {
        padding: 0.75rem;
        background-color: #f8f9fa;
        border: 1px solid #ced4da;
        border-left: none;
        border-radius: 0 4px 4px 0;
        cursor: pointer;
      }
    }
  }
</style>

<script>
  import { createClient } from '@supabase/supabase-js';
  
  // Self-executing function to avoid global scope pollution
  (function() {
    // Initialize Supabase client
    const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
    const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
    
    if (!supabaseUrl || !supabaseAnonKey) {
      console.error('Supabase credentials not found in environment variables');
      return;
    }
    
    const supabase = createClient(supabaseUrl, supabaseAnonKey);
    
    // State variables
    let currentUser = null;
    let users = [];
    let filteredUsers = [];
    let isAdmin = false;
    let isLoading = true;
    let error = null;
    let success = null;
    
    // DOM elements container
    const elements = {};
    
    // Initialize the admin panel
    async function initAdminPanel() {
      console.log('Initializing admin panel');
      
      // Get the admin panel container
      const adminPanel = document.getElementById('admin-panel');
      
      if (!adminPanel) {
        console.error('Admin panel container not found');
        return;
      }
      
      try {
        // Check if user is logged in and is an admin
        const { data: { user } } = await supabase.auth.getUser();
        
        if (!user) {
          renderNotAuthorized(adminPanel, 'You must be logged in to access this page');
          return;
        }
        
        currentUser = user;
        
        // Check if user is an admin by getting their role from the user_roles table
        const { data: userRole, error: roleError } = await supabase
          .from('user_roles')
          .select('role')
          .eq('user_id', user.id)
          .single();
        
        if (roleError) {
          console.error('Error fetching user role:', roleError);
          renderNotAuthorized(adminPanel, 'Error checking authorization');
          return;
        }
        
        isAdmin = userRole?.role === 'admin';
        
        if (!isAdmin) {
          renderNotAuthorized(adminPanel, 'You do not have permission to access this page');
          return;
        }
        
        // Render the admin panel UI
        renderAdminPanel(adminPanel);
        
        // Fetch users
        await fetchUsers();
        
      } catch (err) {
        console.error('Error initializing admin panel:', err);
        renderNotAuthorized(adminPanel, 'An error occurred while loading the admin panel');
      }
    }
    
    // Render the admin panel UI
    function renderAdminPanel(container) {
      container.innerHTML = `
        <div class="admin-panel">
          <div class="header">
            <h2>User Management</h2>
            <button id="logout-btn" class="logout-btn">
              <i class="bi bi-box-arrow-right"></i> Logout
            </button>
          </div>
          
          <div id="alert-container"></div>
          
          <div class="content">
            <div class="invite-section">
              <div class="card">
                <div class="card-header">Invite New User</div>
                <div class="card-body">
                  <form id="invite-form">
                    <div class="form-group">
                      <label for="new-user-email">Email:</label>
                      <input 
                        type="email" 
                        id="new-user-email" 
                        required 
                        placeholder="user@example.com"
                      >
                    </div>
                    <div class="form-group">
                      <label for="new-user-role">Role:</label>
                      <select id="new-user-role">
                        <option value="user">User</option>
                        <option value="admin">Admin</option>
                      </select>
                    </div>
                    <button 
                      type="submit" 
                      id="invite-btn" 
                      class="btn btn-success" 
                      style="width: 100%;"
                    >
                      Invite User
                    </button>
                  </form>
                </div>
              </div>
            </div>
            
            <div class="users-section">
              <div class="card">
                <div class="card-header">
                  <div style="display: flex; justify-content: space-between; align-items: center;">
                    <span>User List</span>
                    <div class="search-container">
                      <input 
                        type="text" 
                        id="search-input" 
                        placeholder="Search users..."
                      >
                      <button id="clear-search">Ã—</button>
                    </div>
                  </div>
                </div>
                <div class="card-body">
                  <div id="users-table-container">
                    <p>Loading users...</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Store references to DOM elements
      elements.alertContainer = document.getElementById('alert-container');
      elements.inviteForm = document.getElementById('invite-form');
      elements.newUserEmail = document.getElementById('new-user-email');
      elements.newUserRole = document.getElementById('new-user-role');
      elements.inviteBtn = document.getElementById('invite-btn');
      elements.searchInput = document.getElementById('search-input');
      elements.clearSearch = document.getElementById('clear-search');
      elements.usersTableContainer = document.getElementById('users-table-container');
      elements.logoutBtn = document.getElementById('logout-btn');
      
      // Add event listeners
      elements.inviteForm.addEventListener('submit', handleInviteUser);
      elements.searchInput.addEventListener('input', handleSearch);
      elements.clearSearch.addEventListener('click', clearSearch);
      elements.logoutBtn.addEventListener('click', handleLogout);
    }
    
    // Render not authorized message
    function renderNotAuthorized(container, message) {
      container.innerHTML = `
        <div class="alert alert-danger" style="margin-top: 2rem;">
          <h3>Not Authorized</h3>
          <p>${message}</p>
          <a href="/" class="btn btn-primary" style="margin-top: 1rem;">Return to Home</a>
        </div>
      `;
    }
    
    // Fetch users from Supabase
    async function fetchUsers() {
      try {
        isLoading = true;
        updateUsersTable();
        
        // Get all users with their roles
        const { data, error: usersError } = await supabase
          .from('user_roles')
          .select(`
            user_id,
            role,
            users:user_id (
              email
            )
          `);
        
        if (usersError) {
          throw usersError;
        }
        
        // Format the data
        users = data.map(item => ({
          uid: item.user_id,
          email: item.users.email,
          role: item.role
        }));
        
        filteredUsers = [...users];
        isLoading = false;
        updateUsersTable();
        
      } catch (err) {
        console.error('Error fetching users:', err);
        isLoading = false;
        error = 'Failed to load users: ' + err.message;
        updateUsersTable();
      }
    }
    
    // Update the users table with current data
    function updateUsersTable() {
      if (!elements.usersTableContainer) return;
      
      if (isLoading) {
        elements.usersTableContainer.innerHTML = `
          <div class="loading-indicator" style="padding: 2rem 0;">
            <div class="spinner"></div>
            <p>Loading users...</p>
          </div>
        `;
        return;
      }
      
      if (error) {
        showAlert(error, 'danger');
        elements.usersTableContainer.innerHTML = `
          <div class="alert alert-danger">
            ${error}
          </div>
        `;
        return;
      }
      
      if (filteredUsers.length === 0) {
        elements.usersTableContainer.innerHTML = `
          <div class="alert alert-info">
            ${elements.searchInput.value ? 'No users match your search' : 'No users found'}
          </div>
        `;
        return;
      }
      
      elements.usersTableContainer.innerHTML = `
        <table>
          <thead>
            <tr>
              <th>Email</th>
              <th>Role</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            ${filteredUsers.map(user => `
              <tr>
                <td>${user.email}</td>
                <td>
                  <span class="badge bg-${user.role === 'admin' ? 'primary' : 'secondary'}">
                    ${user.role}
                  </span>
                </td>
                <td>
                  <button 
                    class="btn btn-danger btn-sm delete-user" 
                    data-uid="${user.uid}"
                  >
                    <i class="bi bi-trash"></i> Delete
                  </button>
                </td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      `;
      
      // Add event listeners to delete buttons
      document.querySelectorAll('.delete-user').forEach(button => {
        button.addEventListener('click', () => {
          const uid = button.getAttribute('data-uid');
          handleDeleteUser(uid);
        });
      });
    }
    
    // Handle inviting a new user
    async function handleInviteUser(e) {
      e.preventDefault();
      
      const email = elements.newUserEmail.value.trim();
      const role = elements.newUserRole.value;
      
      if (!email) return;
      
      try {
        isLoading = true;
        elements.inviteBtn.disabled = true;
        elements.inviteBtn.textContent = 'Inviting...';
        clearAlerts();
        
        // 1. Create the user with Supabase Auth
        const { data: userData, error: userError } = await supabase.auth.admin.inviteUserByEmail(email);
        
        if (userError) {
          throw userError;
        }
        
        const newUserId = userData.user.id;
        
        // 2. Add the user role to the user_roles table
        const { error: roleError } = await supabase
          .from('user_roles')
          .insert([
            { user_id: newUserId, role: role }
          ]);
        
        if (roleError) {
          throw roleError;
        }
        
        // Success
        showAlert('User invited successfully! An email has been sent to the user.', 'success');
        elements.newUserEmail.value = '';
        
        // Refresh the user list
        await fetchUsers();
        
      } catch (err) {
        console.error('Error inviting user:', err);
        showAlert('Failed to invite user: ' + err.message, 'danger');
      } finally {
        isLoading = false;
        elements.inviteBtn.disabled = false;
        elements.inviteBtn.textContent = 'Invite User';
      }
    }
    
    // Handle deleting a user
    async function handleDeleteUser(userId) {
      if (!confirm('Are you sure you want to delete this user?')) {
        return;
      }
      
      try {
        isLoading = true;
        clearAlerts();
        
        // 1. Delete the user role from the user_roles table
        const { error: roleError } = await supabase
          .from('user_roles')
          .delete()
          .eq('user_id', userId);
        
        if (roleError) {
          throw roleError;
        }
        
        // 2. Delete the user from Supabase Auth
        const { error: userError } = await supabase.auth.admin.deleteUser(userId);
        
        if (userError) {
          throw userError;
        }
        
        // Success
        showAlert('User deleted successfully', 'success');
        
        // Refresh the user list
        await fetchUsers();
        
      } catch (err) {
        console.error('Error deleting user:', err);
        showAlert('Failed to delete user: ' + err.message, 'danger');
        isLoading = false;
        updateUsersTable();
      }
    }
    
    // Handle search input
    function handleSearch() {
      const searchTerm = elements.searchInput.value.trim().toLowerCase();
      
      if (searchTerm === '') {
        filteredUsers = [...users];
      } else {
        filteredUsers = users.filter(user => 
          user.email.toLowerCase().includes(searchTerm) || 
          user.role.toLowerCase().includes(searchTerm)
        );
      }
      
      updateUsersTable();
    }
    
    // Clear search
    function clearSearch() {
      elements.searchInput.value = '';
      filteredUsers = [...users];
      updateUsersTable();
    }
    
    // Handle logout
    async function handleLogout() {
      try {
        await supabase.auth.signOut();
        window.location.href = '/';
      } catch (err) {
        console.error('Error signing out:', err);
        showAlert('Error signing out: ' + err.message, 'danger');
      }
    }
    
    // Show alert message
    function showAlert(message, type) {
      if (!elements.alertContainer) return;
      
      const alert = document.createElement('div');
      alert.className = `alert alert-${type}`;
      alert.textContent = message;
      
      elements.alertContainer.appendChild(alert);
      
      // Auto-remove after 5 seconds
      setTimeout(() => {
        alert.remove();
      }, 5000);
    }
    
    // Clear all alerts
    function clearAlerts() {
      if (!elements.alertContainer) return;
      elements.alertContainer.innerHTML = '';
    }
    
    // Initialize when DOM is loaded
    function init() {
      initAdminPanel();
    }
    
    // Multiple event listeners to handle different page load scenarios
    document.addEventListener('astro:page-load', init);
    document.addEventListener('astro:after-swap', init);
    document.addEventListener('DOMContentLoaded', init);
    
    // Immediate execution for already loaded pages
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      setTimeout(init, 10);
    }
  })();
</script>
